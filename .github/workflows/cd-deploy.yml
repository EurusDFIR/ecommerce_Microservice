name: CD - Deploy to GKE

on:
  push:
    branches: [main]
    paths:
      - "services/**"
      - "infrastructure/k8s/**"
  workflow_dispatch:
    inputs:
      service:
        description: "Service to deploy (all, users, products, orders)"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - users
          - products
          - orders

env:
  GCP_PROJECT_ID: ecommerce-micro-0037
  GCP_REGION: asia-southeast1
  GKE_CLUSTER: my-ecommerce-cluster
  GKE_ZONE: asia-southeast1
  ARTIFACT_REGISTRY: asia-southeast1-docker.pkg.dev
  REPOSITORY: ecommerce-images
  NAMESPACE: ecommerce

jobs:
  # Job 1: Build and Push Docker Images
  build-and-push:
    name: Build & Push to Artifact Registry
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - name: users-service
            dockerfile: Dockerfile.postgres
            context: ./services/users-service
            image_name: users-service
          - name: products-service
            dockerfile: Dockerfile.postgres
            context: ./services/products-service
            image_name: products-service
          - name: orders-service
            dockerfile: Dockerfile.firestore
            context: ./services/orders-service
            image_name: orders-service

    outputs:
      users-tag: ${{ steps.set-tags.outputs.users-tag }}
      products-tag: ${{ steps.set-tags.outputs.products-tag }}
      orders-tag: ${{ steps.set-tags.outputs.orders-tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup GCP credentials
        run: |
          if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "Error: GCP_SA_KEY secret is empty"
            exit 1
          fi
          echo "${{ secrets.GCP_SA_KEY }}" | base64 -d > ${HOME}/gcp-key.json

          # Validate JSON
          if ! cat ${HOME}/gcp-key.json | jq empty 2>/dev/null; then
            echo "Error: Invalid JSON in GCP service account key"
            exit 1
          fi

          export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcp-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcp-key.json" >> $GITHUB_ENV

          # Activate service account
          gcloud auth activate-service-account --key-file=${HOME}/gcp-key.json

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          # Re-authenticate Docker with gcloud credentials
          gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }} --quiet

          # Verify authentication
          gcloud auth list

      - name: Generate image tag
        id: generate-tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          TAG="${TIMESTAMP}-${SHORT_SHA}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "üì¶ Image tag: ${TAG}"

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service.image_name }}:${{ steps.generate-tag.outputs.tag }} \
            -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service.image_name }}:latest \
            -f ${{ matrix.service.context }}/${{ matrix.service.dockerfile }} \
            ${{ matrix.service.context }}

      - name: Push Docker image
        run: |
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service.image_name }}:${{ steps.generate-tag.outputs.tag }}
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service.image_name }}:latest
          echo "‚úÖ Pushed ${{ matrix.service.name }}"

      - name: Set output tags
        id: set-tags
        run: |
          SERVICE_NAME="${{ matrix.service.name }}"
          TAG="${{ steps.generate-tag.outputs.tag }}"
          echo "${SERVICE_NAME//-/}-tag=${TAG}" >> $GITHUB_OUTPUT

  # Job 2: Deploy to GKE
  deploy-to-gke:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Decode and setup GCP credentials
        run: |
          # Decode base64 secret to JSON file
          echo "${{ secrets.GCP_SA_KEY }}" | base64 -d > ${HOME}/gcp-key.json

          # Validate JSON
          if ! cat ${HOME}/gcp-key.json | jq empty 2>/dev/null; then
            echo "Error: Invalid JSON in GCP service account key"
            exit 1
          fi

          # Set environment variable for gcloud
          echo "GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcp-key.json" >> $GITHUB_ENV
          echo "‚úÖ GCP credentials file created"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Authenticate with service account
        run: |
          set -e  # Exit on any error

          echo "üîê Activating service account..."

          # Check if key file exists
          if [ ! -f "${HOME}/gcp-key.json" ]; then
            echo "‚ùå Error: gcp-key.json not found!"
            exit 1
          fi

          # Show key file info (without content)
          echo "üìÑ Key file size: $(wc -c < ${HOME}/gcp-key.json) bytes"

          # Activate service account with explicit error handling
          if ! gcloud auth activate-service-account --key-file=${HOME}/gcp-key.json 2>&1; then
            echo "‚ùå Error: Failed to activate service account!"
            echo "Checking key file format..."
            head -n 3 ${HOME}/gcp-key.json
            exit 1
          fi

          echo "‚úÖ Service account activated"

          # Get account email and verify it's not empty
          ACCOUNT_EMAIL=$(gcloud auth list --filter=status:ACTIVE --format="value(account)")
          if [ -z "$ACCOUNT_EMAIL" ]; then
            echo "‚ùå Error: No active account found after activation!"
            gcloud auth list
            exit 1
          fi

          echo "üìß Active account: $ACCOUNT_EMAIL"

          # Set account explicitly using the email we just got
          gcloud config set account "$ACCOUNT_EMAIL"

          # Set project
          gcloud config set project ${{ env.GCP_PROJECT_ID }}

          # Final verification
          echo "‚úÖ Configuration set:"
          echo "   Account: $(gcloud config get-value account)"
          echo "   Project: $(gcloud config get-value project)"

      - name: Verify authentication
        run: |
          set -e

          echo "=== Authentication Verification ==="

          echo "1Ô∏è‚É£ Active account:"
          ACTIVE_ACCOUNT=$(gcloud config get-value account)
          if [ -z "$ACTIVE_ACCOUNT" ]; then
            echo "‚ùå ERROR: No active account!"
            exit 1
          fi
          echo "   ‚úÖ $ACTIVE_ACCOUNT"

          echo ""
          echo "2Ô∏è‚É£ All authenticated accounts:"
          gcloud auth list

          echo ""
          echo "3Ô∏è‚É£ Current project:"
          CURRENT_PROJECT=$(gcloud config get-value project)
          if [ -z "$CURRENT_PROJECT" ]; then
            echo "‚ùå ERROR: No project set!"
            exit 1
          fi
          echo "   ‚úÖ $CURRENT_PROJECT"

          echo ""
          echo "4Ô∏è‚É£ Testing GCP API access:"
          if gcloud projects describe $CURRENT_PROJECT --format="value(projectId)" > /dev/null 2>&1; then
            echo "   ‚úÖ Can access project API"
          else
            echo "   ‚ö†Ô∏è  Warning: Cannot access project API (may need permissions)"
          fi

          echo ""
          echo "5Ô∏è‚É£ Testing GKE access:"
          if gcloud container clusters list --project=$CURRENT_PROJECT > /dev/null 2>&1; then
            echo "   ‚úÖ Can list GKE clusters"
          else
            echo "   ‚ö†Ô∏è  Warning: Cannot list clusters (checking permissions...)"
          fi

          echo ""
          echo "=== All verifications passed! ==="

          echo "‚úÖ Current project:"
          gcloud config get-value project

          echo "‚úÖ Testing GKE access:"
          gcloud container clusters list --project=${{ env.GCP_PROJECT_ID }} || echo "Warning: No clusters found or permission issue"

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --region=${{ env.GKE_ZONE }} \
            --project=${{ env.GCP_PROJECT_ID }}

      - name: Verify kubectl access
        run: |
          kubectl get nodes
          kubectl get namespaces

      - name: Deploy Users Service
        if: github.event.inputs.service == 'all' || github.event.inputs.service == 'users' || github.event_name == 'push'
        run: |
          TAG="${{ needs.build-and-push.outputs.users-tag }}"
          if [ -z "$TAG" ]; then TAG="latest"; fi

          kubectl set image deployment/users-service-postgres-deployment \
            users-service=${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/users-service:${TAG} \
            -n ${{ env.NAMESPACE }}

          kubectl rollout status deployment/users-service-postgres-deployment -n ${{ env.NAMESPACE }} --timeout=5m
          echo "‚úÖ Users service deployed with tag: ${TAG}"

      - name: Deploy Products Service
        if: github.event.inputs.service == 'all' || github.event.inputs.service == 'products' || github.event_name == 'push'
        run: |
          TAG="${{ needs.build-and-push.outputs.products-tag }}"
          if [ -z "$TAG" ]; then TAG="latest"; fi

          kubectl set image deployment/products-service-postgres-deployment \
            products-service=${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/products-service:${TAG} \
            -n ${{ env.NAMESPACE }}

          kubectl rollout status deployment/products-service-postgres-deployment -n ${{ env.NAMESPACE }} --timeout=5m
          echo "‚úÖ Products service deployed with tag: ${TAG}"

      - name: Deploy Orders Service
        if: github.event.inputs.service == 'all' || github.event.inputs.service == 'orders' || github.event_name == 'push'
        run: |
          TAG="${{ needs.build-and-push.outputs.orders-tag }}"
          if [ -z "$TAG" ]; then TAG="latest"; fi

          kubectl set image deployment/orders-service-firestore-deployment \
            orders-service=${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/orders-service:${TAG} \
            -n ${{ env.NAMESPACE }}

          kubectl rollout status deployment/orders-service-firestore-deployment -n ${{ env.NAMESPACE }} --timeout=5m
          echo "‚úÖ Orders service deployed with tag: ${TAG}"

      - name: Verify deployment
        run: |
          echo "üìä Deployment Status:"
          kubectl get deployments -n ${{ env.NAMESPACE }}
          kubectl get pods -n ${{ env.NAMESPACE }}
          kubectl get services -n ${{ env.NAMESPACE }}

      - name: Run health checks
        run: |
          echo "üè• Health Check - Users Service:"
          kubectl get pods -n ${{ env.NAMESPACE }} -l app=users-service

          echo "üè• Health Check - Products Service:"
          kubectl get pods -n ${{ env.NAMESPACE }} -l app=products-service

          echo "üè• Health Check - Orders Service:"
          kubectl get pods -n ${{ env.NAMESPACE }} -l app=orders-service

  # Job 3: Post-Deployment Tests
  post-deployment-test:
    name: E2E Tests (Post-Deployment)
    runs-on: ubuntu-latest
    needs: deploy-to-gke

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Decode and setup GCP credentials
        run: |
          # Decode base64 secret to JSON file
          echo "${{ secrets.GCP_SA_KEY }}" | base64 -d > ${HOME}/gcp-key.json
          
          # Validate JSON
          if ! cat ${HOME}/gcp-key.json | python3 -c "import json, sys; json.load(sys.stdin)" 2>/dev/null; then
            echo "Error: Invalid JSON in GCP service account key"
            exit 1
          fi
          
          # Set environment variable for gcloud
          echo "GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcp-key.json" >> $GITHUB_ENV
          echo "‚úÖ GCP credentials file created"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Authenticate with service account
        run: |
          set -e
          echo "üîê Authenticating for E2E tests..."
          
          # Activate service account
          if ! gcloud auth activate-service-account --key-file=${HOME}/gcp-key.json 2>&1; then
            echo "‚ùå Failed to activate service account!"
            exit 1
          fi
          
          # Get active account
          ACCOUNT_EMAIL=$(gcloud auth list --filter=status:ACTIVE --format="value(account)")
          if [ -z "$ACCOUNT_EMAIL" ]; then
            echo "‚ùå No active account!"
            exit 1
          fi
          
          echo "üìß Active account: $ACCOUNT_EMAIL"
          
          # Set account and project
          gcloud config set account "$ACCOUNT_EMAIL"
          gcloud config set project ${{ env.GCP_PROJECT_ID }}
          
          echo "‚úÖ Authentication configured for E2E tests"

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --region=${{ env.GKE_ZONE }} \
            --project=${{ env.GCP_PROJECT_ID }}

      - name: Run E2E tests
        run: |
          chmod +x ./scripts/test-e2e.sh
          ./scripts/test-e2e.sh

      - name: Test results
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "‚úÖ All E2E tests passed!"
          else
            echo "‚ùå E2E tests failed"
            exit 1
          fi

  # Job 4: Notify Deployment
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-to-gke, post-deployment-test]
    if: always()

    steps:
      - name: Generate deployment summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services Deployed:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Users Service" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Products Service" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Orders Service" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### GKE Cluster:" >> $GITHUB_STEP_SUMMARY
          echo "- Cluster: ${{ env.GKE_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
          echo "- Region: ${{ env.GKE_ZONE }}" >> $GITHUB_STEP_SUMMARY
          echo "- Namespace: ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ Deployment completed successfully!"
