{
	"info": {
		"_postman_id": "ecommerce-microservices-001",
		"name": "E-commerce Microservices - Complete API Collection (FIXED)",
		"description": "Complete API testing collection for E-commerce Microservices on GKE\n\n**Base URL:** http://34.143.235.74\n\n**Services:**\n- Users Service (Port 80) - Authentication & User Management\n- Products Service (Port 80) - Product Catalog\n- Orders Service (Port 80) - Cart & Order Management\n\n**Authentication:** JWT Bearer Token\n\n**Author:** DevOps Team\n**Last Updated:** October 11, 2025\n**Version:** 2.1 (FIXED)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Users Service",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has status\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.be.oneOf(['OK', 'healthy']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/health",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check if Users Service is healthy and running"
					},
					"response": []
				},
				{
					"name": "Register New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has token and user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    ",
									"    // Save token for subsequent requests",
									"    pm.environment.set(\"AUTH_TOKEN\", jsonData.data.token);",
									"    pm.environment.set(\"USER_ID\", jsonData.data.user.id);",
									"    pm.environment.set(\"USER_EMAIL\", jsonData.data.user.email);",
									"});",
									"",
									"pm.test(\"User has correct email\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.user.email).to.include('@');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique email for testing",
									"const timestamp = Date.now();",
									"pm.environment.set(\"UNIQUE_EMAIL\", `testuser${timestamp}@example.com`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{UNIQUE_EMAIL}}\",\n  \"password\": \"SecurePassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/register",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a new user account. Returns JWT token and user details."
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    ",
									"    // Update token",
									"    pm.environment.set(\"AUTH_TOKEN\", jsonData.data.token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"customer@example.com\",\n  \"password\": \"customer123\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login with existing user credentials. Returns JWT token."
					},
					"response": []
				},
				{
					"name": "Verify Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Token is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('userId');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{AUTH_TOKEN}}\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/verify",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"verify"
							]
						},
						"description": "Verify JWT token validity. Used by other services for authentication."
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.satisfy(function(data) {",
									"        return data.firstName || data.first_name || data.fullName || data.full_name;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users/me",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"me"
							]
						},
						"description": "Get authenticated user's profile information"
					},
					"response": []
				}
			],
			"description": "User authentication and management endpoints"
		},
		{
			"name": "2. Products Service",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Service is healthy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.be.oneOf(['OK', 'healthy']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/health",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check Products Service health"
					},
					"response": []
				},
				{
					"name": "Get All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Products have required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('id');",
									"        pm.expect(jsonData[0]).to.have.property('name');",
									"        pm.expect(jsonData[0]).to.have.property('base_price');",
									"        pm.expect(jsonData[0]).to.have.property('stock_quantity');",
									"        ",
									"        // Save first product ID for later tests",
									"        pm.environment.set(\"PRODUCT_ID\", jsonData[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"products"
							]
						},
						"description": "Get list of all products from PostgreSQL"
					},
					"response": []
				},
				{
					"name": "Get Products by Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Products are from correct category\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('category_name');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/products?category=Electronics",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "Electronics"
								}
							]
						},
						"description": "Filter products by category"
					},
					"response": []
				},
				{
					"name": "Search Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Search returns results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/products/search?q=laptop",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"products",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "laptop"
								}
							]
						},
						"description": "Full-text search for products using PostgreSQL tsvector"
					},
					"response": []
				},
				{
					"name": "Get Product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product has all details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('base_price');",
									"    pm.expect(jsonData).to.have.property('stock_quantity');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/products/{{PRODUCT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"products",
								"{{PRODUCT_ID}}"
							]
						},
						"description": "Get detailed information about a specific product"
					},
					"response": []
				},
				{
					"name": "Check Product Stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stock info is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('productId');",
									"    pm.expect(jsonData).to.have.property('stockQuantity');",
									"    pm.expect(jsonData).to.have.property('inStock');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/products/{{PRODUCT_ID}}/stock",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"products",
								"{{PRODUCT_ID}}",
								"stock"
							]
						},
						"description": "Check current stock availability for a product"
					},
					"response": []
				},
				{
					"name": "Get All Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Categories are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('name');",
									"        pm.expect(jsonData[0]).to.have.property('slug');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/categories",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"categories"
							]
						},
						"description": "Get all product categories"
					},
					"response": []
				}
			],
			"description": "Product catalog and inventory management"
		},
		{
			"name": "3. Orders Service",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Service is healthy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.be.oneOf(['OK', 'healthy']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/health",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check Orders Service health (Firestore)"
					},
					"response": []
				},
				{
					"name": "Add Item to Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Item added successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.satisfy(function(data) {",
									"        return (data.success === true) || (data.message && data.message.includes('added'));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productId\": 1,\n  \"quantity\": 2\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/orders/cart",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"orders",
								"cart"
							]
						},
						"description": "Add a product to shopping cart (Firestore). Requires authentication."
					},
					"response": []
				},
				{
					"name": "View Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cart data is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    // Handle both response formats",
									"    if (jsonData.cart) {",
									"        pm.expect(jsonData.cart).to.have.property('items');",
									"    } else if (jsonData.items) {",
									"        pm.expect(jsonData).to.have.property('items');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/orders/cart",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"orders",
								"cart"
							]
						},
						"description": "Get current user's shopping cart from Firestore"
					},
					"response": []
				},
				{
					"name": "Update Cart Item Quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Quantity updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.satisfy(function(data) {",
									"        return (data.success === true) || (data.message && data.message.includes('updated'));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productId\": 1,\n  \"quantity\": 3\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/orders/cart",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"orders",
								"cart"
							]
						},
						"description": "Update quantity of item in cart"
					},
					"response": []
				},
				{
					"name": "Remove Item from Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Item removed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.satisfy(function(data) {",
									"        return (data.success === true) || (data.message && data.message.includes('removed'));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/orders/cart/{{PRODUCT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"orders",
								"cart",
								"{{PRODUCT_ID}}"
							]
						},
						"description": "Remove a specific item from cart"
					},
					"response": []
				},
				{
					"name": "Create Order (Checkout)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Order created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('orderId');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    ",
									"    // Save order ID for later",
									"    pm.environment.set(\"ORDER_ID\", jsonData.orderId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Singapore\",\n    \"country\": \"Singapore\",\n    \"postalCode\": \"123456\"\n  },\n  \"paymentMethod\": \"credit_card\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/orders",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"orders"
							]
						},
						"description": "Create order from cart items (checkout process)"
					},
					"response": []
				},
				{
					"name": "Get Order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Order details returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('orderId');",
									"    pm.expect(jsonData).to.have.property('items');",
									"    pm.expect(jsonData).to.have.property('totalAmount');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/orders/{{ORDER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"orders",
								"{{ORDER_ID}}"
							]
						},
						"description": "Get details of a specific order"
					},
					"response": []
				},
				{
					"name": "Get User's Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Orders list returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/orders",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"orders"
							]
						},
						"description": "Get all orders for authenticated user"
					},
					"response": []
				},
				{
					"name": "Clear Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cart cleared\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.satisfy(function(data) {",
									"        return (data.success === true) || (data.message && data.message.includes('cleared'));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/orders/cart",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"orders",
								"cart"
							]
						},
						"description": "Clear all items from cart"
					},
					"response": []
				}
			],
			"description": "Shopping cart and order management (Firestore)"
		},
		{
			"name": "4. E2E Test Flow",
			"item": [
				{
					"name": "Step 1: Register New User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const timestamp = Date.now();",
									"pm.environment.set(\"TEST_EMAIL\", `e2etest${timestamp}@example.com`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Step 1: User registered\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"AUTH_TOKEN\", jsonData.data.token);",
									"    console.log(\"✅ User registered successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{TEST_EMAIL}}\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"E2E\",\n  \"lastName\": \"Test\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/register",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Step 2: Get Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Step 2: Products retrieved\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.environment.set(\"TEST_PRODUCT_ID\", jsonData[0].id);",
									"        pm.environment.set(\"TEST_PRODUCT_PRICE\", jsonData[0].base_price);",
									"        console.log(\"✅ Found \" + jsonData.length + \" products\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Step 3: Add to Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Step 3: Item added to cart\", function () {",
									"    pm.response.to.have.status(200);",
									"    console.log(\"✅ Product added to cart\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productId\": {{TEST_PRODUCT_ID}},\n  \"quantity\": 2\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/orders/cart",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"orders",
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Step 4: View Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Step 4: Cart retrieved\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    console.log(\"✅ Cart has items\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/orders/cart",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"orders",
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Step 5: Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Step 5: Order created\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"TEST_ORDER_ID\", jsonData.orderId);",
									"    console.log(\"✅ Order created: \" + jsonData.orderId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 E2E Test Street\",\n    \"city\": \"Singapore\",\n    \"country\": \"Singapore\",\n    \"postalCode\": \"123456\"\n  },\n  \"paymentMethod\": \"credit_card\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/orders",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Step 6: Verify Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Step 6: Order verified\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('orderId');",
									"    pm.expect(jsonData).to.have.property('items');",
									"    console.log(\"✅ Order verified successfully\");",
									"    console.log(\"🎉 E2E Test Flow Complete!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/orders/{{TEST_ORDER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"orders",
								"{{TEST_ORDER_ID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Complete end-to-end test flow from registration to order creation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://34.143.235.74",
			"type": "string"
		},
		{
			"key": "AUTH_TOKEN",
			"value": "",
			"type": "string"
		},
		{
			"key": "USER_ID",
			"value": "",
			"type": "string"
		},
		{
			"key": "PRODUCT_ID",
			"value": "1",
			"type": "string"
		},
		{
			"key": "ORDER_ID",
			"value": "",
			"type": "string"
		}
	]
}
