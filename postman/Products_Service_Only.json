{
	"info": {
		"_postman_id": "products-service-only-001",
		"name": "E-commerce - Products Service Only (PUBLIC API)",
		"description": "Test collection ONLY for publicly accessible Products Service\n\n**Base URL:** http://34.143.235.74\n\n**Note:** Users and Orders services are NOT publicly accessible (ClusterIP only)\n\n**Author:** DevOps Team\n**Last Updated:** October 11, 2025\n**Version:** 1.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Products Service Tests",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Service is healthy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.be.oneOf(['OK', 'healthy']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/health",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check Products Service health"
					},
					"response": []
				},
				{
					"name": "Get All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success and data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Products have required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        var product = jsonData.data[0];",
									"        pm.expect(product).to.have.property('id');",
									"        pm.expect(product).to.have.property('name');",
									"        pm.expect(product).to.have.property('price');",
									"        pm.expect(product).to.have.property('stockQuantity');",
									"        ",
									"        // Save first product ID for later tests",
									"        pm.environment.set(\"PRODUCT_ID\", product.id);",
									"        console.log(\"Saved Product ID: \" + product.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"products"
							]
						},
						"description": "Get list of all products"
					},
					"response": []
				},
				{
					"name": "Get Product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product details returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('description');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/products/{{PRODUCT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"products",
								"{{PRODUCT_ID}}"
							]
						},
						"description": "Get detailed information about a specific product"
					},
					"response": []
				},
				{
					"name": "Get Products by Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filtered products returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/products?category=1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "1"
								}
							]
						},
						"description": "Filter products by category"
					},
					"response": []
				},
				{
					"name": "Search Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Search results returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/search?q=laptop",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "laptop"
								}
							]
						},
						"description": "Full-text search for products"
					},
					"response": []
				},
				{
					"name": "Check Product Stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stock info is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.data).to.have.property('productId');",
									"    pm.expect(jsonData.data).to.have.property('stockQuantity');",
									"    pm.expect(jsonData.data).to.have.property('isInStock');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/products/{{PRODUCT_ID}}/stock",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"products",
								"{{PRODUCT_ID}}",
								"stock"
							]
						},
						"description": "Check current stock availability for a product"
					},
					"response": []
				},
				{
					"name": "Get All Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Categories are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    if (jsonData.data.length > 0) {",
									"        pm.expect(jsonData.data[0]).to.have.property('id');",
									"        pm.expect(jsonData.data[0]).to.have.property('name');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/categories",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"categories"
							]
						},
						"description": "Get all product categories"
					},
					"response": []
				},
				{
					"name": "Get Products with Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Paginated results returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    // Check if pagination exists (optional in this API)",
									"    console.log(\"Products count: \" + jsonData.data.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/products?page=1&limit=5",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						},
						"description": "Get products with pagination"
					},
					"response": []
				},
				{
					"name": "Get Products by Price Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filtered products by price\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    ",
									"    // Check if products are within price range",
									"    if (jsonData.data.length > 0) {",
									"        jsonData.data.forEach(function(product) {",
									"            pm.expect(product.price).to.be.at.least(10);",
									"            pm.expect(product.price).to.be.at.most(100);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/products?minPrice=10&maxPrice=100",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "minPrice",
									"value": "10"
								},
								{
									"key": "maxPrice",
									"value": "100"
								}
							]
						},
						"description": "Filter products by price range"
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://34.143.235.74",
			"type": "string"
		},
		{
			"key": "PRODUCT_ID",
			"value": "1",
			"type": "string"
		}
	]
}
